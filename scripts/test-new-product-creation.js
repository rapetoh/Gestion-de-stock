const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function testNewProductCreation() {
  try {
    console.log('üß™ Test de la nouvelle logique de cr√©ation de produit...')
    
    // Get a category for testing
    const category = await prisma.category.findFirst()
    if (!category) {
      console.log('‚ùå Aucune cat√©gorie trouv√©e. Cr√©ez d\'abord une cat√©gorie.')
      return
    }

    // Create a test product with the new logic
    const testProduct = await prisma.product.create({
      data: {
        name: 'Produit Test - Stock Z√©ro',
        description: 'Produit de test pour v√©rifier la nouvelle logique',
        price: 5000,
        costPrice: 3000,
        stock: 0, // Stock initial toujours √† 0
        minStock: 5,
        barcode: 'TEST123456789',
        sku: 'TEST-001',
        categoryId: category.id,
        isActive: true
      }
    })

    console.log('‚úÖ Produit cr√©√© avec succ√®s:')
    console.log(`- Nom: ${testProduct.name}`)
    console.log(`- Stock initial: ${testProduct.stock}`)
    console.log(`- Prix de vente: ${testProduct.price} FCFA`)
    console.log(`- Prix d'achat: ${testProduct.costPrice} FCFA`)
    console.log(`- Cat√©gorie: ${category.name}`)

    // Verify the stock is indeed 0
    if (testProduct.stock === 0) {
      console.log('‚úÖ Confirmation: Le stock initial est bien √† 0')
    } else {
      console.log('‚ùå Erreur: Le stock initial n\'est pas √† 0')
    }

    console.log('\nüìù Instructions pour l\'utilisateur:')
    console.log('1. Le produit a √©t√© cr√©√© avec un stock de 0')
    console.log('2. Pour ajouter du stock, allez dans la section "Ravitaillement"')
    console.log('3. Cr√©ez un ravitaillement pour ce produit')

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// Run the test
testNewProductCreation() 