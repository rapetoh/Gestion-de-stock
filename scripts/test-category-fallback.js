const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function testCategoryFallback() {
  try {
    console.log('üß™ Test de la logique de fallback vers la cat√©gorie "Other"...')
    
    // Test 1: Produit sans cat√©gorie (doit √™tre assign√© √† "Other")
    console.log('\nüìã Test 1: Produit sans cat√©gorie')
    const testProduct1 = {
      name: 'Produit Test Sans Cat√©gorie',
      price: 1000,
      costPrice: 500,
      stock: 10,
      barcode: `TEST${Date.now()}1`
      // Pas de cat√©gorie - doit √™tre assign√© √† "Other"
    }
    
    try {
      const response = await fetch('http://localhost:3000/api/products/bulk', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ products: [testProduct1] })
      })
      const result = await response.json()
      console.log('‚úÖ R√©sultat attendu: Produit import√© avec cat√©gorie "Other"')
      console.log(`- Imported: ${result.summary?.imported || 0}`)
      console.log(`- Errors: ${result.summary?.errors || 0}`)
      
      // V√©rifier que le produit a bien √©t√© assign√© √† "Other"
      if (result.summary?.imported > 0) {
        const importedProduct = await prisma.product.findFirst({
          where: { barcode: testProduct1.barcode },
          include: { category: true }
        })
        if (importedProduct) {
          console.log(`- Cat√©gorie assign√©e: ${importedProduct.category?.name || 'Aucune'}`)
        }
        
        // Nettoyer
        await prisma.product.deleteMany({
          where: { barcode: testProduct1.barcode }
        })
        console.log('üßπ Produit de test supprim√©')
      }
    } catch (error) {
      console.log('‚ùå Erreur de connexion:', error.message)
    }
    
    // Test 2: Produit avec cat√©gorie vide (doit √™tre assign√© √† "Other")
    console.log('\nüìã Test 2: Produit avec cat√©gorie vide')
    const testProduct2 = {
      name: 'Produit Test Cat√©gorie Vide',
      price: 1000,
      costPrice: 500,
      stock: 10,
      barcode: `TEST${Date.now()}2`,
      category: '' // Cat√©gorie vide - doit √™tre assign√© √† "Other"
    }
    
    try {
      const response = await fetch('http://localhost:3000/api/products/bulk', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ products: [testProduct2] })
      })
      const result = await response.json()
      console.log('‚úÖ R√©sultat attendu: Produit import√© avec cat√©gorie "Other"')
      console.log(`- Imported: ${result.summary?.imported || 0}`)
      console.log(`- Errors: ${result.summary?.errors || 0}`)
      
      // V√©rifier que le produit a bien √©t√© assign√© √† "Other"
      if (result.summary?.imported > 0) {
        const importedProduct = await prisma.product.findFirst({
          where: { barcode: testProduct2.barcode },
          include: { category: true }
        })
        if (importedProduct) {
          console.log(`- Cat√©gorie assign√©e: ${importedProduct.category?.name || 'Aucune'}`)
        }
        
        // Nettoyer
        await prisma.product.deleteMany({
          where: { barcode: testProduct2.barcode }
        })
        console.log('üßπ Produit de test supprim√©')
      }
    } catch (error) {
      console.log('‚ùå Erreur de connexion:', error.message)
    }
    
    // Test 3: Produit avec cat√©gorie valide (doit cr√©er la cat√©gorie)
    console.log('\nüìã Test 3: Produit avec cat√©gorie valide')
    const testProduct3 = {
      name: 'Produit Test Cat√©gorie Valide',
      price: 1000,
      costPrice: 500,
      stock: 10,
      barcode: `TEST${Date.now()}3`,
      category: 'Test Category' // Cat√©gorie valide - doit √™tre cr√©√©e
    }
    
    try {
      const response = await fetch('http://localhost:3000/api/products/bulk', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ products: [testProduct3] })
      })
      const result = await response.json()
      console.log('‚úÖ R√©sultat attendu: Produit import√© avec nouvelle cat√©gorie')
      console.log(`- Imported: ${result.summary?.imported || 0}`)
      console.log(`- Errors: ${result.summary?.errors || 0}`)
      
      // V√©rifier que le produit a bien √©t√© assign√© √† la nouvelle cat√©gorie
      if (result.summary?.imported > 0) {
        const importedProduct = await prisma.product.findFirst({
          where: { barcode: testProduct3.barcode },
          include: { category: true }
        })
        if (importedProduct) {
          console.log(`- Cat√©gorie assign√©e: ${importedProduct.category?.name || 'Aucune'}`)
        }
        
        // Nettoyer
        await prisma.product.deleteMany({
          where: { barcode: testProduct3.barcode }
        })
        await prisma.category.deleteMany({
          where: { name: 'Test Category' }
        })
        console.log('üßπ Produit et cat√©gorie de test supprim√©s')
      }
    } catch (error) {
      console.log('‚ùå Erreur de connexion:', error.message)
    }
    
    // Test 4: V√©rifier que la cat√©gorie "Other" existe
    console.log('\nüìã Test 4: V√©rification de la cat√©gorie "Other"')
    const otherCategory = await prisma.category.findFirst({
      where: { name: 'Other' }
    })
    
    if (otherCategory) {
      console.log('‚úÖ Cat√©gorie "Other" existe d√©j√†')
      console.log(`- ID: ${otherCategory.id}`)
    } else {
      console.log('‚ö†Ô∏è Cat√©gorie "Other" n\'existe pas encore (sera cr√©√©e lors du premier import)')
    }
    
    console.log('\nüéØ R√©sum√© des tests:')
    console.log('‚úÖ Fallback vers "Other" pour cat√©gorie manquante: Impl√©ment√©')
    console.log('‚úÖ Fallback vers "Other" pour cat√©gorie vide: Impl√©ment√©')
    console.log('‚úÖ Cr√©ation automatique de nouvelles cat√©gories: Impl√©ment√©')
    console.log('‚úÖ Cr√©ation automatique de "Other" si n√©cessaire: Impl√©ment√©')
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testCategoryFallback() 