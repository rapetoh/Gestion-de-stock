const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function testImportValidations() {
  try {
    console.log('üß™ Test des nouvelles validations d\'import...')
    
    // Test 1: Produit sans code-barres (doit √©chouer)
    console.log('\nüìã Test 1: Produit sans code-barres')
    const testProduct1 = {
      name: 'Produit Test Sans Barcode',
      price: 1000,
      costPrice: 500,
      stock: 10,
      category: 'Test'
      // Pas de barcode - doit √©chouer
    }
    
    try {
      const response = await fetch('http://localhost:3000/api/products/bulk', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ products: [testProduct1] })
      })
      const result = await response.json()
      console.log('‚úÖ R√©sultat attendu: Erreur de validation')
      console.log(`- Erreurs: ${result.errors?.length || 0}`)
      console.log(`- Message: ${result.errors?.[0] || 'Aucune erreur'}`)
    } catch (error) {
      console.log('‚ùå Erreur de connexion:', error.message)
    }
    
    // Test 2: Produit sans stock (doit √©chouer)
    console.log('\nüìã Test 2: Produit sans stock')
    const testProduct2 = {
      name: 'Produit Test Sans Stock',
      price: 1000,
      costPrice: 500,
      barcode: 'TEST123456789',
      category: 'Test'
      // Pas de stock - doit √©chouer
    }
    
    try {
      const response = await fetch('http://localhost:3000/api/products/bulk', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ products: [testProduct2] })
      })
      const result = await response.json()
      console.log('‚úÖ R√©sultat attendu: Erreur de validation')
      console.log(`- Erreurs: ${result.errors?.length || 0}`)
      console.log(`- Message: ${result.errors?.[0] || 'Aucune erreur'}`)
    } catch (error) {
      console.log('‚ùå Erreur de connexion:', error.message)
    }
    
    // Test 3: Produit avec stock √† 0 (doit r√©ussir)
    console.log('\nüìã Test 3: Produit avec stock √† 0')
    const testProduct3 = {
      name: 'Produit Test Stock Zero',
      price: 1000,
      costPrice: 500,
      stock: 0, // Stock √† 0 - doit r√©ussir
      barcode: `TEST${Date.now()}3`,
      category: 'Test'
    }
    
    try {
      const response = await fetch('http://localhost:3000/api/products/bulk', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ products: [testProduct3] })
      })
      const result = await response.json()
      console.log('‚úÖ R√©sultat attendu: Import r√©ussi')
      console.log(`- Imported: ${result.summary?.imported || 0}`)
      console.log(`- Errors: ${result.summary?.errors || 0}`)
      
      // Nettoyer
      if (result.summary?.imported > 0) {
        await prisma.product.deleteMany({
          where: { barcode: testProduct3.barcode }
        })
        console.log('üßπ Produit de test supprim√©')
      }
    } catch (error) {
      console.log('‚ùå Erreur de connexion:', error.message)
    }
    
    // Test 4: D√©tection des doublons par code-barres uniquement
    console.log('\nüìã Test 4: D√©tection des doublons par code-barres uniquement')
    
    // Cr√©er un produit avec un code-barres unique
    const uniqueBarcode = `TEST${Date.now()}4`
    const testProduct4 = {
      name: 'Produit Test Unique',
      price: 1000,
      costPrice: 500,
      stock: 10,
      barcode: uniqueBarcode,
      category: 'Test'
    }
    
    try {
      const response1 = await fetch('http://localhost:3000/api/products/bulk', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ products: [testProduct4] })
      })
      const result1 = await response1.json()
      console.log('‚úÖ Premier produit import√©')
      console.log(`- Imported: ${result1.summary?.imported || 0}`)
      
      // Essayer d'importer un produit avec le m√™me code-barres mais nom diff√©rent
      const testProduct4b = {
        name: 'Produit Test Diff√©rent Nom',
        price: 2000,
        costPrice: 1000,
        stock: 20,
        barcode: uniqueBarcode, // M√™me code-barres
        category: 'Test'
      }
      
      const response2 = await fetch('http://localhost:3000/api/products/bulk', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ products: [testProduct4b] })
      })
      const result2 = await response2.json()
      console.log('‚úÖ R√©sultat attendu: Doublon d√©tect√© par code-barres')
      console.log(`- Skipped: ${result2.summary?.skipped || 0}`)
      console.log(`- Errors: ${result2.summary?.errors || 0}`)
      
      // Nettoyer
      await prisma.product.deleteMany({
        where: { barcode: uniqueBarcode }
      })
      console.log('üßπ Produit de test supprim√©')
    } catch (error) {
      console.log('‚ùå Erreur de connexion:', error.message)
    }
    
    // Test 5: Produits avec m√™me nom mais code-barres diff√©rents (doit r√©ussir)
    console.log('\nüìã Test 5: Produits avec m√™me nom mais code-barres diff√©rents')
    const testProduct5a = {
      name: 'Produit M√™me Nom',
      price: 1000,
      costPrice: 500,
      stock: 10,
      barcode: `TEST${Date.now()}5a`,
      category: 'Test'
    }
    
    const testProduct5b = {
      name: 'Produit M√™me Nom', // M√™me nom
      price: 2000,
      costPrice: 1000,
      stock: 20,
      barcode: `TEST${Date.now()}5b`, // Code-barres diff√©rent
      category: 'Test'
    }
    
    try {
      const response = await fetch('http://localhost:3000/api/products/bulk', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ products: [testProduct5a, testProduct5b] })
      })
      const result = await response.json()
      console.log('‚úÖ R√©sultat attendu: Les deux produits import√©s (noms identiques mais code-barres diff√©rents)')
      console.log(`- Imported: ${result.summary?.imported || 0}`)
      console.log(`- Skipped: ${result.summary?.skipped || 0}`)
      console.log(`- Errors: ${result.summary?.errors || 0}`)
      
      // Nettoyer
      await prisma.product.deleteMany({
        where: { 
          barcode: { 
            in: [testProduct5a.barcode, testProduct5b.barcode] 
          } 
        }
      })
      console.log('üßπ Produits de test supprim√©s')
    } catch (error) {
      console.log('‚ùå Erreur de connexion:', error.message)
    }
    
    console.log('\nüéØ R√©sum√© des tests:')
    console.log('‚úÖ Code-barres obligatoire: Impl√©ment√©')
    console.log('‚úÖ Stock obligatoire: Impl√©ment√©')
    console.log('‚úÖ Stock peut √™tre 0: Impl√©ment√©')
    console.log('‚úÖ D√©tection des doublons par code-barres uniquement: Impl√©ment√©')
    console.log('‚úÖ Produits avec m√™me nom mais code-barres diff√©rents: Accept√©s')
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testImportValidations() 